<?xml version="1.0"?>
<configuration>
    <placeholders>
        <placeholder id="template_name">Workday to Salesforce Change Role Employee Broadcast</placeholder>
    </placeholders>
    <sections>
        <section id="use_case">
			<![CDATA[
This template serves as a foundation for setting an online sync of Employee Role Changes from Workday to Salesforce Users.

Every time there is a change in an already existing Employee in Workday, the integration will poll for them in the source instance and it will be responsible for updating the Change Role for the User in Salesforce.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this template leverages the batch module. The batch job is divided in *Process* and *On Complete* stages.

The template retrieves all updated Employees since last poll, checks for duplicates and triggers the Batch process. During the *Process* stage, in the first step the different Employees are matched by email with the existing Users in Salesforce. In the second step the PermissionSet for the users are updated to Salesforce.

Finally during the *On Complete* stage the template logs output statistics data into the console.
]]>
        </section>
        <section id="considerations">
			<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source and destination systems, that must be made in order for all to run smoothly. **Failing to do so could lead to unexpected behavior of the template.**

1. **Users cannot be deleted in Salesforce:** For now, the only thing to do regarding users removal is disabling/deactivating them, but this won't make the username available for a new user.
2. **Each user needs to be associated to a Profile:** Salesforce's profiles are what define the permissions the user will have for manipulating data and other users. Each Salesforce account has its own profiles.
3. **Working with sandboxes for the same account**: Although each sandbox should be a completely different environment, Usernames cannot be repeated in different sandboxes, i.e. if you have a user with username *bob.dylan* in *sandbox A*, you will not be able to create another user with username *bob.dylan* in *sandbox B*.
4. **Workday email uniqueness**: The email can be repeated for two or more accounts (or missing).
]]>
        </section>
        <section id="application_configuration">
			<![CDATA[
**Scheduler Configuration**
+ scheduler.frequency `60000`
+ scheduler.start.delay `1000`
+ watermark.default.expression `2016-12-13T03:00:59Z`

**Workday Connector Configuration**
+ wday.username `admin@workday`
+ wday.password `secret`
+ wday.tenant `tenant`
+ wday.host `impl-cc.workday.com`

**Salesforce Connector Configuration**
+ sfdc.username `user@company.com`
+ sfdc.password `secret`
+ sfdc.securityToken `1234fdkfdkso20kw2sd`

**Roles Map**
+ wday.sfdc.rolesMap `{'SOME_ROLE_IN_WDAY': 'SOME_ROLE_IN_SF', 'ANOTHER_ROLE_IN_WDAY': 'ANOTHER_ROLE_IN_SF' }`
]]>
        </section>
        <section id="api_calls">
                <![CDATA[
This section is not relevant for this use case.
]]>
        </section>
        <section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the template is implemented on this XML, directed by a batch job that will be responsible for creations/updates. The severeal message processors constitute four high level actions that fully implement the logic of this template:

1. Job execution is invoked from schedulerFlow (endpoints.xml) every time there is a new query executed asking for updated Employees.
2. During the *Process* stage, each Employee will be filtered depending on if it has an existing matching User in the Salesforce.
3. The last step of the *Process* stage will update Users in Salesforce.
4. Finally during the *On Complete* stage the template logs output statistics data into the console.
]]>
        </section>
    </sections>
</configuration>